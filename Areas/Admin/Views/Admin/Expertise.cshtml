@model IEnumerable<BSM311.Models.Expertise>

@{
    Layout = "~/Areas/Admin/Views/Shared/_AdminLayout.cshtml";
}

<div class="container mt-3">
    <h2>Expertise List</h2>
    <div class="mb-3">
        <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addExpertiseModal">Add New Expertise</button>
        <button class="btn btn-secondary" data-bs-toggle="modal" data-bs-target="#addServiceModal">Add New Service</button>
    </div>

    <table id="expertiseTable" class="table table-striped table-bordered dt-responsive nowrap" width="100%">
        <thead>
            <tr>
                <th>Name</th>
                <th>Description</th>
                <th>Services</th>
                <th>Actions</th>
            </tr>
        </thead>
    </table>
</div>

<!-- Add Expertise Modal -->
<div class="modal fade" id="addExpertiseModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add New Expertise</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="addExpertiseForm" novalidate>
                    <div class="mb-3">
                        <label class="form-label">Name</label>
                        <input type="text" class="form-control" name="name" required minlength="2" maxlength="100">
                        <div class="invalid-feedback">
                            Please enter an expertise name (2-100 characters)
                        </div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Description</label>
                        <textarea class="form-control" name="description" maxlength="500"></textarea>
                        <div class="invalid-feedback">
                            Description cannot exceed 500 characters
                        </div>
                    </div>
                    @Html.AntiForgeryToken()
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" onclick="saveExpertise()">Save</button>
            </div>
        </div>
    </div>
</div>

<!-- Add Service Modal -->
<div class="modal fade" id="addServiceModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add New Service</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="addServiceForm" novalidate>
                    <div class="mb-3">
                        <label class="form-label">Service Name</label>
                        <input type="text" class="form-control" name="serviceName" required minlength="2" maxlength="100">
                        <div class="invalid-feedback">
                            Please enter a service name (2-100 characters)
                        </div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Description</label>
                        <textarea class="form-control" name="description" maxlength="500"></textarea>
                        <div class="invalid-feedback">
                            Description cannot exceed 500 characters
                        </div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Price</label>
                        <input type="number" class="form-control" name="price" step="0.01" min="0" required>
                        <div class="invalid-feedback">
                            Please enter a valid price
                        </div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Duration (minutes)</label>
                        <input type="number" class="form-control" name="durationInMinutes" min="1" max="480" required>
                        <div class="invalid-feedback">
                            Please enter a valid duration (1-480 minutes)
                        </div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Expertise</label>
                        <select class="form-select" name="expertiseId" required>
                            <option value="">Select Expertise</option>
                            @foreach (var expertise in Model)
                            {
                                <option value="@expertise.Id">@expertise.Name</option>
                            }
                        </select>
                        <div class="invalid-feedback">
                            Please select an expertise
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" onclick="saveService()">Save</button>
            </div>
        </div>
    </div>
</div>

<style>
    .notification-container {
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 9999;
    }

    .notification {
        min-width: 300px;
        margin-bottom: 10px;
        transition: all 0.3s ease-in-out;
        opacity: 0;
    }

    .notification.show {
        opacity: 1;
    }

    .notification.hiding {
        opacity: 0;
    }

    .list-unstyled li {
        padding: 5px 0;
        border-bottom: 1px solid #eee;
    }

    .list-unstyled li:last-child {
        border-bottom: none;
    }

    .btn-link {
        padding: 0 5px;
    }

    .was-validated .form-control:invalid {
        border-color: #dc3545;
        padding-right: calc(1.5em + 0.75rem);
        background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 12 12' width='12' height='12' fill='none' stroke='%23dc3545'%3e%3ccircle cx='6' cy='6' r='4.5'/%3e%3cpath stroke-linejoin='round' d='M5.8 3.6h.4L6 6.5z'/%3e%3ccircle cx='6' cy='8.2' r='.6' fill='%23dc3545' stroke='none'/%3e%3c/svg%3e");
        background-repeat: no-repeat;
        background-position: right calc(0.375em + 0.1875rem) center;
        background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem);
    }
</style>

@section Scripts {
    <script>
        let expertiseTable;

        $(document).ready(function () {
            initializeDataTable();
            
            if (!$('.notification-container').length) {
                $('body').append('<div class="notification-container"></div>');
            }
        });

        function initializeDataTable() {
            expertiseTable = $('#expertiseTable').DataTable({
                ajax: {
                    url: '/api/admin/expertise',
                    dataSrc: ''
                },
                columns: [
                    {
                        data: 'name',
                        width: '20%'
                    },
                    {
                        data: 'description',
                        width: '30%',
                        render: function (data) {
                            return data || '';
                        }
                    },
                    {
                        data: 'services',
                        width: '35%',
                        render: function (data) {
                            if (data && data.length > 0) {
                                return '<ul class="list-unstyled">' + data.map(s => `
                                    <li class="d-flex justify-content-between align-items-center">
                                        ${s.name}
                                        <button class="btn btn-sm btn-link text-danger" 
                                                onclick="deleteService(${s.id})" 
                                                title="Delete service">
                                            <i class="fas fa-trash-alt"></i>
                                        </button>
                                    </li>`).join('') + '</ul>';
                            }
                            return '<span>No services available</span>';
                        }
                    },
                    {
                        data: 'id',
                        width: '15%',
                        orderable: false,
                        render: function (data) {
                            return `<button class="btn btn-sm btn-danger" onclick="deleteExpertise(${data})">Delete</button>`;
                        }
                    }
                ],
                responsive: true,
                processing: true,
                language: {
                    processing: '<div class="spinner-border text-primary" role="status"><span class="visually-hidden">Loading...</span></div>',
                    emptyTable: "No expertises found",
                    search: "Search:",
                    lengthMenu: "Show _MENU_ entries",
                    info: "Showing _START_ to _END_ of _TOTAL_ entries",
                    paginate: {
                        first: "First",
                        last: "Last",
                        next: "Next",
                        previous: "Previous"
                    }
                },
                order: [[0, 'asc']]
            });
        }

        function showNotification(message, isSuccess) {
            const container = $('.notification-container');
            const alertType = isSuccess ? 'alert-success' : 'alert-danger';
            const icon = isSuccess ?
                '<i class="fas fa-check-circle me-2"></i>' :
                '<i class="fas fa-exclamation-circle me-2"></i>';

            const notification = $(`
                <div class="notification alert ${alertType} alert-dismissible fade">
                    ${icon}
                    <span>${message}</span>
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            `);

            container.append(notification);

            setTimeout(() => {
                notification.addClass('show');
            }, 10);

            setTimeout(() => {
                notification.addClass('hiding');
                setTimeout(() => {
                    notification.remove();
                }, 300);
            }, 3000);

            notification.find('.btn-close').on('click', function () {
                notification.addClass('hiding');
                setTimeout(() => {
                    notification.remove();
                }, 300);
            });
        }

        function validateForm(formElement) {
            const form = $(formElement)[0];
            if (!form.checkValidity()) {
                event.preventDefault();
                event.stopPropagation();
                $(form).addClass('was-validated');
                return false;
            }
            return true;
        }

        function saveExpertise() {
            if (!validateForm('#addExpertiseForm')) {
                return;
            }

            const formData = {
                Name: $('#addExpertiseForm input[name="name"]').val().trim(),
                Description: $('#addExpertiseForm textarea[name="description"]').val().trim()
            };

            $.ajax({
                url: '/api/admin/expertise',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(formData),
                success: function (response) {
                    showNotification("Expertise created successfully", true);
                    $('#addExpertiseModal').modal('hide');
                    $('#addExpertiseForm')[0].reset();
                    $('#addExpertiseForm').removeClass('was-validated');
                    expertiseTable.ajax.reload();
                },
                error: function (xhr) {
                    const errorMessage = xhr.responseJSON?.message || 
                                       Object.values(xhr.responseJSON?.errors || {}).flat().join(', ') || 
                                       "An error occurred";
                    showNotification(errorMessage, false);
                }
            });
        }

        function saveService() {
            if (!validateForm('#addServiceForm')) {
                return;
            }

            const formData = {
                Name: $('#addServiceForm input[name="serviceName"]').val().trim(),
                Description: $('#addServiceForm textarea[name="description"]').val().trim(),
                Price: parseFloat($('#addServiceForm input[name="price"]').val()),
                DurationInMinutes: parseInt($('#addServiceForm input[name="durationInMinutes"]').val()),
                ExpertiseId: parseInt($('#addServiceForm select[name="expertiseId"]').val())
            };

            $.ajax({
                url: '/api/admin/service',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(formData),
                success: function (response) {
                    showNotification("Service created successfully", true);
                    $('#addServiceModal').modal('hide');
                    $('#addServiceForm')[0].reset();
                    $('#addServiceForm').removeClass('was-validated');
                    expertiseTable.ajax.reload();
                },
                error: function (xhr) {
                    const errorMessage = xhr.responseJSON?.message || 
                                       Object.values(xhr.responseJSON?.errors || {}).flat().join(', ') || 
                                       "An error occurred";
                    showNotification(errorMessage, false);
                }
            });
        }

        function deleteExpertise(id) {
            if (confirm('Are you sure you want to delete this expertise?')) {
                $.ajax({
                    url: `/api/admin/expertise/${id}`,
                    type: 'DELETE',
                    success: function () {
                        showNotification("Expertise deleted successfully", true);
                        expertiseTable.ajax.reload();
                    },
                    error: function (xhr) {
                        const errorMessage = xhr.responseJSON?.message || "An error occurred";
                        showNotification(errorMessage, false);
                    }
                });
            }
        }

        function deleteService(serviceId) {
            if (confirm('Are you sure you want to delete this service?')) {
                $.ajax({
                    url: `/api/admin/service/${serviceId}`,
                    type: 'DELETE',
                    success: function () {
                        showNotification("Service deleted successfully", true);
                        expertiseTable.ajax.reload();
                    },
                    error: function (xhr) {
                        const errorMessage = xhr.responseJSON?.message || "An error occurred";
                        showNotification(errorMessage, false);
                    }
                });
            }
        }
    </script>
}