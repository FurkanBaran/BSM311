@model IEnumerable<BSM311.Models.DTOs.EmployeeDTO>

@{
    Layout = "~/Areas/Admin/Views/Shared/_AdminLayout.cshtml";
}

<div class="container-fluid">
    <div class="row mb-3">
        <div class="col-md-6">
            <h1>Employee List</h1>
        </div>
        <div class="col-md-6 text-end">
            <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addEmployeeModal">
                <i class="fas fa-plus"></i> Add New Employee
            </button>
        </div>
    </div>
    <div class="card">
        <div class="card-body">
            <table class="table table-striped" id="employeeTable">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Work Days</th>
                        <th>Expertises</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var employee in Model)
                    {
                        <tr>
                            <td>@employee.FirstName @employee.LastName</td>
                            <td>
                                @if (employee.WorkDays.Any())
                                {
                                    @string.Join(", ", employee.WorkDays.Select(w => w.ToString()))
                                }
                                else
                                {
                                    <span class="text-muted">No work days specified</span>
                                }
                            </td>
                            <td>
                                @if (employee.ExpertiseNames.Any())
                                {
                                    @string.Join(", ", employee.ExpertiseNames)
                                }
                                else
                                {
                                    <span class="text-muted">No expertise specified</span>
                                }
                            </td>
                            <td>
                                <button class="btn btn-sm btn-primary me-1" onclick="editEmployee(@employee.Id)">
                                    <i class="fas fa-edit"></i>
                                </button>
                                <button class="btn btn-sm btn-danger" onclick="deleteEmployee(@employee.Id)">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- Add Employee Modal -->
<div class="modal fade" id="addEmployeeModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add New Employee</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="addEmployeeForm" novalidate>
                    <div class="mb-3">
                        <label class="form-label">First Name</label>
                        <input type="text" class="form-control" name="firstName" required minlength="2" maxlength="50">
                        <div class="invalid-feedback">Please enter a valid first name (2-50 characters)</div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Last Name</label>
                        <input type="text" class="form-control" name="lastName" required minlength="2" maxlength="50">
                        <div class="invalid-feedback">Please enter a valid last name (2-50 characters)</div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Work Days</label>
                        <div class="work-days-container">
                            @foreach (DayOfWeek day in Enum.GetValues(typeof(DayOfWeek)))
                            {
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" name="workDays" value="@((int)day)">
                                    <label class="form-check-label">@day</label>
                                </div>
                            }
                        </div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Expertises</label>
                        <div class="expertise-container">
                            @if (ViewBag.Expertises != null)
                            {
                                @foreach (var expertise in ViewBag.Expertises)
                                {
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox"
                                               name="expertises" value="@expertise.Id"
                                               id="expertise_@expertise.Id">
                                        <label class="form-check-label" for="expertise_@expertise.Id">
                                            @expertise.Name
                                        </label>
                                    </div>
                                }
                            }
                            else
                            {
                                <p class="text-muted">No expertises available</p>
                            }
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" onclick="saveEmployee()">Save</button>
            </div>
        </div>
    </div>
</div>

<!-- Edit Employee Modal -->
<div class="modal fade" id="editEmployeeModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Edit Employee</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="editEmployeeForm" novalidate>
                    <input type="hidden" name="id">
                    <div class="mb-3">
                        <label class="form-label">First Name</label>
                        <input type="text" class="form-control" name="firstName" required minlength="2" maxlength="50">
                        <div class="invalid-feedback">Please enter a valid first name (2-50 characters)</div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Last Name</label>
                        <input type="text" class="form-control" name="lastName" required minlength="2" maxlength="50">
                        <div class="invalid-feedback">Please enter a valid last name (2-50 characters)</div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Work Days</label>
                        <div class="work-days-container">
                            @foreach (DayOfWeek day in Enum.GetValues(typeof(DayOfWeek)))
                            {
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" name="workDays" value="@((int)day)">
                                    <label class="form-check-label">@day</label>
                                </div>
                            }
                        </div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Expertises</label>
                        <div class="expertise-container">
                            @if (ViewBag.Expertises != null)
                            {
                                @foreach (var expertise in ViewBag.Expertises)
                                {
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox"
                                               name="expertises" value="@expertise.Id"
                                               id="expertise_@expertise.Id">
                                        <label class="form-check-label" for="expertise_@expertise.Id">
                                            @expertise.Name
                                        </label>
                                    </div>
                                }
                            }
                            else
                            {
                                <p class="text-muted">No expertises available</p>
                            }
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" onclick="updateEmployee()">Update</button>
            </div>
        </div>
    </div>
</div>

<style>
    .work-days-container {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
        gap: 10px;
        padding: 10px;
        border: 1px solid #dee2e6;
        border-radius: 4px;
    }

    .notification {
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 9999;
        min-width: 300px;
    }
</style>

@section Scripts {
    <script>
        $(document).ready(function () {
            $('#employeeTable').DataTable({
                responsive: true,
                language: {
                    emptyTable: "No employees found",
                    zeroRecords: "No matching records found",
                    search: "Search:",
                    lengthMenu: "Show _MENU_ entries",
                    info: "Showing _START_ to _END_ of _TOTAL_ entries",
                    paginate: {
                        first: "First",
                        last: "Last",
                        next: "Next",
                        previous: "Previous"
                    }
                }
            });

            $('select[name="expertises"]').select2({
                placeholder: 'Select expertises',
                width: '100%'
            });
        });

        function saveEmployee() {
            const form = $('#addEmployeeForm');
            if (!form[0].checkValidity()) {
                form.addClass('was-validated');
                return;
            }

            const formData = {
                firstName: form.find('input[name="firstName"]').val().trim(),
                lastName: form.find('input[name="lastName"]').val().trim(),
                workDays: form.find('input[name="workDays"]:checked').map(function () {
                    return parseInt($(this).val());
                }).get(),
                expertiseNames: form.find('input[name="expertises"]:checked').map(function () {
                    return $(this).next('label').text().trim();
                }).get()
            };

      
            $.ajax({
                url: '/api/admin/employee',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(formData),
                success: function () {
                    showNotification('Employee added successfully', true);
                    $('#addEmployeeModal').modal('hide');
                    setTimeout(() => {
                        location.reload();
                    }, 2000);
                },
                error: function (err) {
                    showNotification(err.responseJSON?.message || 'An error occurred', false);
                }
            });
        }

        function editEmployee(id) {
            $.get(`/api/admin/employee/${id}`, function (data) {
                const form = $('#editEmployeeForm');
                form.find('input[name="id"]').val(data.id);
                form.find('input[name="firstName"]').val(data.firstName);
                form.find('input[name="lastName"]').val(data.lastName);

                form.find('input[type="checkbox"]').prop('checked', false);

                data.workDays.forEach(day => {
                    form.find(`input[name="workDays"][value="${day}"]`).prop('checked', true);
                });

                data.expertiseNames.forEach(name => {
                    form.find(`input[name="expertises"]`).each(function () {
                        if ($(this).next('label').text().trim() === name) {
                            $(this).prop('checked', true);
                        }
                    });
                });

                $('#editEmployeeModal').modal('show');
            });
        }




        function updateEmployee() {
            const form = $('#editEmployeeForm');
            if (!form[0].checkValidity()) {
                form.addClass('was-validated');
                return;
            }

            const id = form.find('input[name="id"]').val();
            const formData = {
                firstName: form.find('input[name="firstName"]').val().trim(),
                lastName: form.find('input[name="lastName"]').val().trim(),
                workDays: form.find('input[name="workDays"]:checked').map(function () {
                    return parseInt($(this).val());
                }).get(),
                expertiseNames: form.find('input[name="expertises"]:checked').map(function () {
                    return $(this).next('label').text().trim();
                }).get()
            };

            $.ajax({
                url: `/api/admin/employee/${id}`,
                type: 'PUT',
                contentType: 'application/json',
                data: JSON.stringify(formData), 
                success: function () {
                    showNotification('Employee updated successfully', true);
                    $('#editEmployeeModal').modal('hide');
                    setTimeout(() => {
                        location.reload();
                    }, 2000);
                },
                error: function (err) {
                    showNotification(err.responseJSON?.message || 'An error occurred', false);
                }
            });
        }

        function deleteEmployee(id) {
            if (confirm('Are you sure you want to delete this employee?')) {
                $.ajax({
                    url: `/api/admin/employee/${id}`,
                    type: 'DELETE',
                    success: function () {
                        showNotification('Employee deleted successfully', true);
                        $('#editEmployeeModal').modal('hide');
                        setTimeout(() => {
                            location.reload();
                        }, 2000);
                    },
                    error: function (err) {
                        showNotification(err.responseJSON?.message || 'An error occurred', false);
                    }
                });
            }
        }

        function showNotification(message, isSuccess) {
            const notification = $(
                `<div class="notification alert ${isSuccess ? 'alert-success' : 'alert-danger'} alert-dismissible fade show" role="alert">
                    ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>`
            );

            $('body').append(notification);

            setTimeout(() => {
                notification.alert('close');
            }, 3000);
        }
    </script>
}
